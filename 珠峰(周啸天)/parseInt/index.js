/**
 * 数组的迭代方法（遍历数组中的每一项做一些特殊的处理）
 *     forEach 遍历数组每一项（数组中有多少项，就会触发执行多少次回调函数，
 * 每一次把迭代的当前项和当前项的索引传递给回调函数）
 *     map 和 forEach 类似，只不过支持返回值，回调函数中的返回值会把当前迭代的
 * 这一项替换掉
 *     find 迭代数据每一项的时候，只要有一项在回调函数中返回true则找到内容，后面不会再迭代了，
 * 返回的是找到的这一项
 *     findIndex  迭代数据每一项的时候，只要有一项在回调函数中返回找到内容的索引，后面不会再迭代了，
 * 返回的是找到的这一项的索引
 *     filter 迭代每一项的时候，回调函数中所有返回true的这一项获取到，以新数组返回（包含
 * 筛选出来的所有项）
 *     every 验证数组中每一项是否符合某个筛选条件的，只有每一项都符合结果才返回true
 *     some 验证数组中是否存在符合某个筛选条件的，只要有一个符合结果就是true
 *     reduce 上一次回调函数中运算的结果会作为下一次处理的信息
 *     let total = arr.reduce((n, item) => {
 *        return n + index
 *     },0)
 */

let arr = [1, 2, 3, 4]
arr = arr.map(parseInt)
console.log(arr) // [1, NaN, NaN, NaN]

// parseInt([value]) // 把value转换为数字，要求value是字符串（不是字符串先转换为字符串）

// parseInt(value, radix)
// radix是进制，不写或者写0都是按照10处理（如果value是以ox开头，则默认是16）
// 进制取值范围：2~36，如果不在这之间，运行的结果是NaN
// 把value看做radix进制，最后把radix进制转换为十进制

// 把一个值转换为十进制
// 位权值: 个位：0 十位：1 ...

// 147（八进制）=> 十进制
// 1*8^2 + 4*8^1 + 7*8^0
